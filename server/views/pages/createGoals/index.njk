{% extends "../../partials/layout.njk" %}

{% set pageId = "create-goals" %}
{% set pageTitle = "Create goals with prisoner" %}

{% block beforeContent %}
  {% include "../../partials/breadcrumb.njk" %}
{% endblock %}

{% block content %}
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">

      <h1 class="govuk-heading-l">Create goals with {{ prisonerSummary.firstName | safe }} {{ prisonerSummary.lastName | safe }}</h1>

      <h2 class="govuk-heading-s">Add goals</h2>
      <p class="govuk-hint">
        Goals should be SMART, meaning 'specific', 'measurable', 'achievable', 'relevant' and 'time-bound'. SMART goals allow progress to be better measured and evaluated.<br>
        You can add the steps to make goals more measurable and achievable.
      </p>

      <form class="form" method="post" novalidate="">
        <input type="hidden" name="_csrf" value="{{ csrfToken }}" />
        <input type="hidden" name="prisonNumber" value="{{ prisonerSummary.prisonNumber }}" />

        {% for goals in form.goals or range(1) %}
        {% set goalLoop = loop %}
        <div class="govuk-summary-card">
          <div class="govuk-summary-card__title-wrapper">
            <h2 class="govuk-summary-card__title">
              Goal {{ goalLoop.index }}
            </h2>
            <ul class="govuk-summary-card__actions govuk-!-display-none-print govuk-!-margin-0">
              <li class="govuk-summary-card__action">
                {% if goalLoop.length > 1 %}
                  {{ govukButton({
                    name: "action",
                    text: "Remove goal",
                    classes: "govuk-button--secondary govuk-!-margin-bottom-0",
                    attributes: {
                      'data-qa': 'remove-goal-button',
                      formaction: 'create/REMOVE_GOAL?goalNumber=' + goalLoop.index0
                    },
                    preventDoubleClick: true
                  }) }}
                {% endif %}
              </li>
            </ul>
          </div>

          <div class="govuk-summary-card__content">

            {{ govukCharacterCount({
              name: "goals[" + goalLoop.index0 + "][title]",
              id: "goals[" + goalLoop.index0 + "].title",
              value: form.goals[(goalLoop.index0)].title,
              maxlength: 512,
              label: {
                text: "Describe the goal",
                classes: "govuk-label--s"
              },
              charactersOverLimitText: {
                one: 'Goal must be 512 characters or less',
                other: 'Goal must be 512 characters or less'
              },
              errorMessage: errors | findError("goals[" + goalLoop.index0 + "].title")
            }) }}

            {% set manuallyEnteredTargetCompletionDate %}
              {{ mojDatePicker({
                name: "goals[" + goalLoop.index0 + "][manuallyEnteredTargetCompletionDate]",
                value: form.goals[(goalLoop.index0)].manuallyEnteredTargetCompletionDate,
                id: "goals[" + goalLoop.index0 + "][manuallyEnteredTargetCompletionDate]",
                label: {
                  text: "When are they aiming to achieve this goal by?",
                  classes: "govuk-visually-hidden"
                },
                hint: {
                  text: "For example, 27/3/2007."
                }
              }) }}
            {% endset -%}

            {{ govukRadios({
              name: "goals[" + goalLoop.index0 + "][targetCompletionDate]",
              idPrefix: "goals[" + goalLoop.index0 + "].targetCompletionDate",
              value: form.goals[(goalLoop.index0)].targetCompletionDate,
              fieldset: {
                legend: {
                  text: "When are they aiming to achieve this goal by?",
                  classes: "govuk-fieldset__legend--s"
                }
              },
              items: [
                {
                  "value": goalTargetCompletionDateOptions.THREE_MONTHS,
                  "text": "in 3 months (by " + today | addMonths(3) | formatDate('D MMMM YYYY') + ")"
                }, {
                  "value": goalTargetCompletionDateOptions.SIX_MONTHS,
                  "text": "in 6 months (by " + today | addMonths(6) | formatDate('D MMMM YYYY') + ")"
                }, {
                  "value": goalTargetCompletionDateOptions.TWELVE_MONTHS,
                  "text": "in 12 months (by " + today | addMonths(12) | formatDate('D MMMM YYYY') + ")"
                }, {
                  "value": goalTargetCompletionDateOptions.ANOTHER_DATE,
                  "text": "set another date",
                  "conditional": {
                    "html": manuallyEnteredTargetCompletionDate
                  }
                }
              ],
              errorMessage: errors | findError("goals[" + goalLoop.index0 + "].targetCompletionDate")
            }) }}

            <h3 class="govuk-heading-s">Add steps to help them achieve this goal</h3>

            {% for steps in form.goals[goalLoop.index0].steps or range(1) %}
              {% set stepLoop = loop %}

              {% call govukFieldset({
                classes: 'moj-add-another__item',
                legend: {
                  text: 'Description and actions for step ' + stepLoop.index + ' of goal ' + goalLoop.index,
                  classes: 'govuk-visually-hidden',
                  isPageHeading: false
                }
              }) %}

                {{ govukCharacterCount({
                  name: "goals[" + goalLoop.index0 + "][steps][" + stepLoop.index0 + "][title]",
                  id: "goals[" + goalLoop.index0 + "].steps[" + stepLoop.index0 + "].title",
                  value: form.goals[(goalLoop.index0)].steps[(stepLoop.index0)].title,
                  maxlength: 512,
                  rows: 2,
                  label: {
                    text: 'Step ' + stepLoop.index,
                    classes: "govuk-label--s",
                    isPageHeading: false
                  },
                  hint: {
                    text: "Describe this step"
                  },
                  charactersOverLimitText: {
                    one: 'Step must be 512 characters or less',
                    other: 'Step must be 512 characters or less'
                  },
                  errorMessage: errors | findError('goals[' + goalLoop.index0 + '].steps[' + stepLoop.index0 + '].title')
                }) }}

                {% if stepLoop.length > 1 %}
                  {{ govukButton({
                    name: "action",
                    text: "Remove step",
                    classes: "govuk-button--secondary moj-add-another__remove-button",
                    attributes: {
                      'data-qa': 'remove-step-button',
                      formaction: 'create/REMOVE_STEP?goalNumber=' + goalLoop.index0 + "&stepNumber=" + stepLoop.index0
                    },
                    preventDoubleClick: true
                  }) }}
                {% endif %}
              {% endcall %}
            {% endfor %}
            <div class="govuk-form-group govuk-!-margin-bottom-2">
              {{ govukButton({
                id: "add-another-step-to-goal-" + goalLoop.index0 + "-button",
                name: "action",
                text: "Add another step to this goal",
                classes: "govuk-button--secondary",
                attributes: {
                  formaction: 'create/ADD_STEP?goalNumber=' + goalLoop.index0
                },
                preventDoubleClick: true
              }) }}
            </div>

            <div class="govuk-form-group">
              <div class="govuk-form-group">
                <h1 class="govuk-label-wrapper">
                  <label class="govuk-label govuk-label--s" for="goals[{{ goalLoop.index0 }}][note]">
                    Add a note to this goal (optional)
                  </label>
                </h1>
                <div class="govuk-warning-text govuk-!-margin-top-4">
                  <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
                  <strong class="govuk-warning-text__text">
                    <span class="govuk-visually-hidden">Warning</span>
                    This note will be seen by the prisoner and other prison staff.
                  </strong>
                </div>
                {{ errors | findError("goals[" + goalLoop.index0 + "].note") }}
                <textarea class="govuk-textarea" id="goals[{{ goalLoop.index0 }}][note]" name="goals[{{ goalLoop.index0 }}][note]" rows="5" aria-describedby="warning-text">{{ form.goals[goalLoop.index0].note }}</textarea>
              </div>
            </div>

          </div>
        </div>
        {% endfor %}

        <div class="govuk-form-group">
          {{ govukButton({
            id: "add-another-goal-button",
            name: "action",
            text: "Add another goal",
            classes: "govuk-button--secondary",
            attributes: {
              formaction: 'create/ADD_GOAL'
            },
            preventDoubleClick: true
          }) }}
        </div>

        {{ govukButton({
          id: "submit-button",
          name: "action",
          value: "submit-form",
          text: "Save to learning and work plan",
          preventDoubleClick: true
        }) }}

      </form>

    </div>
  </div>

{% endblock %}
