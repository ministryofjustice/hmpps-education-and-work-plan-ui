/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/support-strategies/{supportStrategyReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['updateSupportStrategy']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/strengths/{strengthReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['updateStrength']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/conditions/{conditionReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['updateCondition']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/challenges/{challengeReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['updateChallenge']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/support-strategies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getSupportStrategies']
    put?: never
    post: operations['createSupportStrategies']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/strengths': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getStrengths']
    put?: never
    post: operations['createStrengths']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/set-up-data': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['createPersonInEducationWithNeeds']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/education-trigger': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['educationTriggerSimulation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/education-support-plan': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getEducationSupportPlan']
    put?: never
    post: operations['createEducationSupportPlan']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/education-support-plan/review': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['createReview']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/conditions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getConditions']
    put?: never
    post: operations['createConditions']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/challenges': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getChallenges']
    put?: never
    post: operations['createChallenges']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/aln-trigger': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['alnTriggerSimulation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/aln-screener': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getALNScreener']
    put?: never
    post: operations['createALNScreener']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/plan-creation-schedule/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch: operations['updatePlanCreationScheduleStatus']
    trace?: never
  }
  '/search/prisons/{prisonId}/people': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['searchByPrison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reference-data/{domain}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getReferenceData']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reference-data/{domain}/categories': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getReferenceDataCategories']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/reviews/review-schedules': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getReviewSchedules']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/plan-creation-schedule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getPlanCreationSchedules']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/profile/{prisonNumber}/plan-action-status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getPlanActionStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    UpdateSupportStrategyRequest: {
      /** @example null */
      active: boolean
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
    }
    ReferenceData: {
      /**
       * @description The short code of a reference data
       * @example null
       */
      code: string
      /**
       * @description The description of the reference data code
       * @example null
       */
      description?: string
      /**
       * @description The short code of a reference data category
       * @example null
       */
      categoryCode?: string
      /**
       * @description The description of the reference data category
       * @example null
       */
      categoryDescription?: string
      /**
       * @description The short code of a reference data area
       * @example null
       */
      areaCode?: string
      /**
       * @description The description of the reference data area
       * @example null
       */
      areaDescription?: string
      /**
       * Format: int32
       * @description The sequence number of the code. Used for ordering codes correctly in lists and drop downs.
       * @example 3
       */
      listSequence?: number
      /**
       * @description whether or not this ref data is active
       * @example null
       */
      active?: boolean
    }
    SupportStrategyResponse: {
      /**
       * Format: uuid
       * @example null
       */
      reference: string
      /** @example null */
      supportStrategyType: components['schemas']['ReferenceData']
      /** @example null */
      active: boolean
      /**
       * @description The DPS username of the person who created this resource.
       * @example asmith_gen
       */
      createdBy: string
      /**
       * @description The display name of the person who created this resource.
       * @example Alex Smith
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was created.
       * @example 2023-06-19T09:39:44Z
       */
      createdAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was created.
       * @example BXI
       */
      createdAtPrison: string
      /**
       * @description The DPS username of the person who last updated this resource.
       * @example asmith_gen
       */
      updatedBy: string
      /**
       * @description The display name of the person who last updated this resource.
       * @example Alex Smith
       */
      updatedByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was last updated. This will be the same as the created date if it has not yet been updated.
       * @example 2023-06-19T09:39:44Z
       */
      updatedAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was updated.
       * @example BXI
       */
      updatedAtPrison: string
      /** @example null */
      detail?: string
    }
    UpdateStrengthRequest: {
      /**
       * @description Whether or not the strength is active
       * @example null
       */
      active: boolean
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
    }
    StrengthResponse: {
      /**
       * Format: uuid
       * @description The unique reference of this strength
       * @example c88a6c48-97e2-4c04-93b5-98619966447b
       */
      reference: string
      /**
       * @description Whether or not this strength is from the ALN screener
       * @example null
       */
      fromALNScreener: boolean
      /** @example null */
      strengthType: components['schemas']['ReferenceData']
      /**
       * @description Whether or not this strength is active
       * @example null
       */
      active: boolean
      /**
       * @description The DPS username of the person who created this resource.
       * @example asmith_gen
       */
      createdBy: string
      /**
       * @description The display name of the person who created this resource.
       * @example Alex Smith
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was created.
       * @example 2023-06-19T09:39:44Z
       */
      createdAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was created.
       * @example BXI
       */
      createdAtPrison: string
      /**
       * @description The DPS username of the person who last updated this resource.
       * @example asmith_gen
       */
      updatedBy: string
      /**
       * @description The display name of the person who last updated this resource.
       * @example Alex Smith
       */
      updatedByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was last updated. This will be the same as the created date if it has not yet been updated.
       * @example 2023-06-19T09:39:44Z
       */
      updatedAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was updated.
       * @example BXI
       */
      updatedAtPrison: string
      /**
       * Format: date
       * @description The date that the screener was recorded that has this strength
       * @example 2023-11-19
       */
      alnScreenerDate?: string
      /**
       * @description Optional details about the symptoms of this strength
       * @example John is great at reading.
       */
      symptoms?: string
      /**
       * @description The list of enums as to how this strength was identified. Multiple reasons may apply.
       * @example null
       */
      howIdentified?: (
        | 'EDUCATION_SKILLS_WORK'
        | 'WIDER_PRISON'
        | 'CONVERSATIONS'
        | 'COLLEAGUE_INFO'
        | 'FORMAL_PROCESSES'
        | 'SELF_DISCLOSURE'
        | 'OTHER_SCREENING_TOOL'
        | 'OTHER'
      )[]
      /**
       * @description Details about how this strength was identified when the OTHER IdentificationSource enum option is chosen
       * @example The trainer noticed that John was great at reading.
       */
      howIdentifiedOther?: string
    }
    UpdateConditionRequest: {
      /**
       * @description Whether or not the condition is active
       * @example null
       */
      active: boolean
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
    }
    ConditionResponse: {
      /**
       * Format: uuid
       * @description The unique reference of this condition
       * @example c88a6c48-97e2-4c04-93b5-98619966447b
       */
      reference: string
      /**
       * @example null
       * @enum {string}
       */
      source: 'SELF_DECLARED' | 'CONFIRMED_DIAGNOSIS'
      /** @example null */
      conditionType: components['schemas']['ReferenceData']
      /**
       * @description Whether or not this condition is active
       * @example null
       */
      active: boolean
      /**
       * @description The DPS username of the person who created this resource.
       * @example asmith_gen
       */
      createdBy: string
      /**
       * @description The display name of the person who created this resource.
       * @example Alex Smith
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was created.
       * @example 2023-06-19T09:39:44Z
       */
      createdAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was created.
       * @example BXI
       */
      createdAtPrison: string
      /**
       * @description The DPS username of the person who last updated this resource.
       * @example asmith_gen
       */
      updatedBy: string
      /**
       * @description The display name of the person who last updated this resource.
       * @example Alex Smith
       */
      updatedByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was last updated. This will be the same as the created date if it has not yet been updated.
       * @example 2023-06-19T09:39:44Z
       */
      updatedAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was updated.
       * @example BXI
       */
      updatedAtPrison: string
      /**
       * @description more granular information about the condition
       * @example (for Mental Health) Social Anxiety
       */
      conditionName?: string
      /**
       * @description additional detail about the condition
       * @example null
       */
      conditionDetails?: string
    }
    UpdateChallengeRequest: {
      /**
       * @description Whether or not the challenge is active
       * @example null
       */
      active: boolean
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
    }
    ChallengeResponse: {
      /**
       * Format: uuid
       * @description The unique reference of this challenge
       * @example c88a6c48-97e2-4c04-93b5-98619966447b
       */
      reference: string
      /**
       * @description Whether or not this challenge is from the ALN screener
       * @example null
       */
      fromALNScreener: boolean
      /** @example null */
      challengeType: components['schemas']['ReferenceData']
      /**
       * @description Whether or not this challenge is active
       * @example null
       */
      active: boolean
      /**
       * @description The DPS username of the person who created this resource.
       * @example asmith_gen
       */
      createdBy: string
      /**
       * @description The display name of the person who created this resource.
       * @example Alex Smith
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was created.
       * @example 2023-06-19T09:39:44Z
       */
      createdAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was created.
       * @example BXI
       */
      createdAtPrison: string
      /**
       * @description The DPS username of the person who last updated this resource.
       * @example asmith_gen
       */
      updatedBy: string
      /**
       * @description The display name of the person who last updated this resource.
       * @example Alex Smith
       */
      updatedByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was last updated. This will be the same as the created date if it has not yet been updated.
       * @example 2023-06-19T09:39:44Z
       */
      updatedAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was updated.
       * @example BXI
       */
      updatedAtPrison: string
      /**
       * Format: date
       * @description The date that the screener was recorded that has this challenge
       * @example 2023-11-19
       */
      alnScreenerDate?: string
      /**
       * @description Optional details about the symptoms of this challenge
       * @example John struggles to read text on white background.
       */
      symptoms?: string
      /**
       * @description The list of enums as to how this challenge was identified. Multiple reasons may apply.
       * @example null
       */
      howIdentified?: (
        | 'EDUCATION_SKILLS_WORK'
        | 'WIDER_PRISON'
        | 'CONVERSATIONS'
        | 'COLLEAGUE_INFO'
        | 'FORMAL_PROCESSES'
        | 'SELF_DISCLOSURE'
        | 'OTHER_SCREENING_TOOL'
        | 'OTHER'
      )[]
      /**
       * @description Details about how this challenge was identified when the OTHER IdentificationSource enum option is chosen
       * @example The trainer noticed that John could read better on a cream background.
       */
      howIdentifiedOther?: string
    }
    CreateSupportStrategiesRequest: {
      /** @example null */
      supportStrategies: components['schemas']['SupportStrategyRequest'][]
    }
    SupportStrategyRequest: {
      /** @example null */
      supportStrategyTypeCode: string
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
      /**
       * @description Optional further explanation or description of this strategy
       * @example null
       */
      detail?: string
    }
    SupportStrategyListResponse: {
      /** @example null */
      supportStrategies: components['schemas']['SupportStrategyResponse'][]
    }
    CreateStrengthsRequest: {
      /**
       * @description A List containing zero or more Strengths.
       * @example null
       */
      strengths: components['schemas']['StrengthRequest'][]
    }
    StrengthRequest: {
      /**
       * @description the reference data type code of the strength
       * @example null
       */
      strengthTypeCode: string
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
      /**
       * @description Optional details about the symptoms of this strength
       * @example John struggles is great at reading.
       */
      symptoms?: string
      /**
       * @description The list of enums as to how this strength was identified. Multiple reasons may apply.
       * @example null
       */
      howIdentified?: (
        | 'EDUCATION_SKILLS_WORK'
        | 'WIDER_PRISON'
        | 'CONVERSATIONS'
        | 'COLLEAGUE_INFO'
        | 'FORMAL_PROCESSES'
        | 'SELF_DISCLOSURE'
        | 'OTHER_SCREENING_TOOL'
        | 'OTHER'
      )[]
      /**
       * @description Details about how this strength was identified when the OTHER IdentificationSource enum option is chosen
       * @example The trainer noticed that John was great at reading.
       */
      howIdentifiedOther?: string
    }
    StrengthListResponse: {
      /**
       * @description A List containing zero or more Strengths.
       * @example null
       */
      strengths: components['schemas']['StrengthResponse'][]
    }
    EducationNeedRequest: {
      prisonId: string
      alnNeed: boolean
      lddNeed: boolean
      conditionSelfDeclared: boolean
      conditionConfirmed: boolean
      challengeNotALN: boolean
      strengthNotALN: boolean
      alnScreener: boolean
      inEducation: boolean
    }
    PlanCreationScheduleEntity: {
      prisonNumber: string
      /** Format: date */
      deadlineDate: string
      /** Format: date */
      earliestStartDate?: string
      /** @enum {string} */
      status:
        | 'SCHEDULED'
        | 'EXEMPT_SYSTEM_TECHNICAL_ISSUE'
        | 'EXEMPT_PRISONER_TRANSFER'
        | 'EXEMPT_PRISONER_RELEASE'
        | 'EXEMPT_PRISONER_DEATH'
        | 'EXEMPT_PRISONER_MERGE'
        | 'EXEMPT_PRISONER_NOT_COMPLY'
        | 'EXEMPT_NOT_IN_EDUCATION'
        | 'EXEMPT_NO_NEED'
        | 'EXEMPT_UNKNOWN'
        | 'COMPLETED'
      exemptionReason?: string
      exemptionDetail?: string
      needSources: (
        | 'LDD_SCREENER'
        | 'ALN_SCREENER'
        | 'CONDITION_SELF_DECLARED'
        | 'CONDITION_CONFIRMED_DIAGNOSIS'
        | 'CHALLENGE_NOT_ALN_SCREENER'
      )[]
      createdAtPrison: string
      updatedAtPrison: string
      /** Format: int32 */
      version?: number
      /** Format: uuid */
      id: string
      /** Format: uuid */
      reference: string
      createdBy?: string
      /** Format: date-time */
      createdAt?: string
      updatedBy?: string
      /** Format: date-time */
      updatedAt?: string
    }
    CreateEducationSupportPlanRequest: {
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
      /**
       * @description Whether there is a current Education Health Care Plan in place for the person.
       * @example true
       */
      hasCurrentEhcp: boolean
      /**
       * Format: date
       * @description An ISO-8601 date representing date that the Education Support Plan should be reviewed.
       * @example 2023-11-19
       */
      reviewDate: string
      /**
       * @description Details of education support that the person feels they need or would benefit from.
       * @example Chris is sensitive to loud noises and has asked for a quieter position in a calm classroom.
       */
      individualSupport: string
      /**
       * @description Optional details of who created the Education Support Plan. If not specified the authenticated user is assumed to have created it.
       * @example null
       */
      planCreatedBy?: components['schemas']['PlanContributor']
      /**
       * @description Optional list of other people involved in the creation of the Education Support Plan.  If provided, the list must contain at least 1 contributor. The list must not be empty.
       * @example null
       */
      otherContributors?: components['schemas']['PlanContributor'][]
      /**
       * @description Optional details of any adjustments that need to be made to the teaching or curriculum.
       * @example Ensure simple, clear and relevant examples of used when explaining concepts.
       */
      teachingAdjustments?: string
      /**
       * @description Optional details of any specific teaching skills or knowledge that are required.
       * @example British Sign Language.
       */
      specificTeachingSkills?: string
      /**
       * @description Optional details of any exam access arrangements that need to be made.
       * @example Escort Chris to the exam hall 10 minutes before other students to allow him time to settle and collect his thoughts before the exam.
       */
      examAccessArrangements?: string
      /**
       * @description Optional details of any support that a Learning Needs Support Practitioner needs to provide.
       * @example An LNSP is required for approx 1 hour per week to read and explain passages of text to Chris.
       */
      lnspSupport?: string
      /**
       * Format: int32
       * @description Recommended number of additional support hours per week to meet the individual's educational needs.   Mandatory when `lnspSupport` is populated.
       * @example 4
       */
      lnspSupportHours?: number
      /**
       * @description Optional Additional information about the plan that is not covered in the other questions.
       * @example Chris is very open about his issues and is a pleasure to talk to.
       */
      detail?: string
    }
    PlanContributor: {
      /** @example Joe Bloggs */
      name: string
      /** @example Education Instructor */
      jobRole: string
    }
    EducationSupportPlanResponse: {
      /**
       * @description Whether there is a current Education Health Care Plan in place for the person.
       * @example true
       */
      hasCurrentEhcp: boolean
      /**
       * @description Details of education support that the person feels they need or would benefit from.
       * @example Chris is sensitive to loud noises and has asked for a quieter position in a calm classroom.
       */
      individualSupport: string
      /**
       * @description The DPS username of the person who created this resource.
       * @example asmith_gen
       */
      createdBy: string
      /**
       * @description The display name of the person who created this resource.
       * @example Alex Smith
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was created.
       * @example 2023-06-19T09:39:44Z
       */
      createdAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was created.
       * @example BXI
       */
      createdAtPrison: string
      /**
       * @description The DPS username of the person who last updated this resource.
       * @example asmith_gen
       */
      updatedBy: string
      /**
       * @description The display name of the person who last updated this resource.
       * @example Alex Smith
       */
      updatedByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was last updated. This will be the same as the created date if it has not yet been updated.
       * @example 2023-06-19T09:39:44Z
       */
      updatedAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was updated.
       * @example BXI
       */
      updatedAtPrison: string
      /**
       * @description Optional details of who created the Education Support Plan. If not present the plan was created by the createdBy/createdByDisplayName fields.
       * @example null
       */
      planCreatedBy?: components['schemas']['PlanContributor']
      /**
       * @description Optional list of other people involved in the creation of the Education Support Plan.
       * @example null
       */
      otherContributors?: components['schemas']['PlanContributor'][]
      /**
       * @description Optional details of any adjustments that need to be made to the teaching or curriculum.
       * @example Ensure simple, clear and relevant examples of used when explaining concepts.
       */
      teachingAdjustments?: string
      /**
       * @description Optional details of any specific teaching skills or knowledge that are required.
       * @example British Sign Language.
       */
      specificTeachingSkills?: string
      /**
       * @description Optional details of any exam access arrangements that need to be made.
       * @example Escort Chris to the exam hall 10 minutes before other students to allow him time to settle and collect his thoughts before the exam.
       */
      examAccessArrangements?: string
      /**
       * @description Optional details of any support that a Learning Needs Support Practitioner needs to provide.
       * @example An LNSP is required for approx 1 hour per week to read and explain passages of text to Chris.
       */
      lnspSupport?: string
      /**
       * Format: int32
       * @description Recommended number of Learning Needs Support Practitioner support hours per week to meet the individual's educational needs.   Will be present when `lnspSupport` is populated.
       * @example 4
       */
      lnspSupportHours?: number
      /**
       * @description Optional Additional information about the plan that is not covered in the other questions.
       * @example Chris is very open about his issues and is a pleasure to talk to.
       */
      detail?: string
    }
    ReviewContributor: {
      /** @example Joe Bloggs */
      name: string
      /** @example Education Instructor */
      jobRole: string
    }
    SupportPlanReviewRequest: {
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
      /**
       * Format: date
       * @description An ISO-8601 date representing date that the next review should be scheduled.
       * @example 2023-11-19
       */
      nextReviewDate: string
      /**
       * @description whether or not the prisoner declined to be part of the review
       * @example null
       */
      prisonerDeclinedFeedback: boolean
      /**
       * @description Details about how the reviewer feels the prisoner has progressed.
       * @example Chris has really improved his concentration in lessons.
       */
      reviewerFeedback: string
      /**
       * @description Request object containing updates to the education support plan .
       * @example null
       */
      updateEducationSupportPlan: components['schemas']['UpdateEducationSupportPlanRequest']
      /**
       * @description Optional details of who created the Education Support Plan review. If not specified the authenticated user is assumed to have created it.
       * @example null
       */
      reviewCreatedBy?: components['schemas']['ReviewContributor']
      /**
       * @description Optional list of other people involved in the creation of the Education Support Plan Review.  If provided, the list must contain at least 1 contributor. The list must not be empty.
       * @example null
       */
      otherContributors?: components['schemas']['ReviewContributor'][]
      /**
       * @description Details about how the prisoner feels they are progressing. This is mandatory if the prisonerDeclinedFeedback is false.
       * @example The education support changes have really helped me to concentrate in lessons.
       */
      prisonerFeedback?: string
    }
    UpdateEducationSupportPlanRequest: {
      /**
       * @description If there are no changes to the plan then this is false and we ignore any updated fields. This maybe necessary for day one with a reduced review journey.
       * @example null
       */
      anyChanges: boolean
      /**
       * @description Optional details of any adjustments that need to be made to the teaching or curriculum.
       * @example Ensure simple, clear and relevant examples of used when explaining concepts.
       */
      teachingAdjustments?: string
      /**
       * @description Optional details of any specific teaching skills or knowledge that are required.
       * @example British Sign Language.
       */
      specificTeachingSkills?: string
      /**
       * @description Optional details of any exam access arrangements that need to be made.
       * @example Escort Chris to the exam hall 10 minutes before other students to allow him time to settle and collect his thoughts before the exam.
       */
      examAccessArrangements?: string
      /**
       * @description Optional details of any support that a Learning Needs Support Practitioner needs to provide.
       * @example An LNSP is required for approx 1 hour per week to read and explain passages of text to Chris.
       */
      lnspSupport?: string
      /**
       * Format: int32
       * @description Recommended number of additional support hours per week to meet the individual's educational needs.   Mandatory when `lnspSupport` is populated.
       * @example 4
       */
      lnspSupportHours?: number
      /**
       * @description Optional Additional information about the plan that is not covered in the other questions.
       * @example Chris is very open about his issues and is a pleasure to talk to.
       */
      detail?: string
    }
    ConditionRequest: {
      /**
       * @example null
       * @enum {string}
       */
      source: 'SELF_DECLARED' | 'CONFIRMED_DIAGNOSIS'
      /**
       * @description the reference data type code of the condition
       * @example null
       */
      conditionTypeCode: string
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
      /**
       * @description more granular information about the condition
       * @example (for Mental Health) Social Anxiety
       */
      conditionName?: string
      /**
       * @description additional detail about the condition
       * @example null
       */
      conditionDetails?: string
    }
    CreateConditionsRequest: {
      /**
       * @description A List containing zero or more Conditions.
       * @example null
       */
      conditions: components['schemas']['ConditionRequest'][]
    }
    ConditionListResponse: {
      /**
       * @description A List containing zero or more Conditions.
       * @example null
       */
      conditions: components['schemas']['ConditionResponse'][]
    }
    ChallengeRequest: {
      /**
       * @description the reference data type code of the challenge
       * @example null
       */
      challengeTypeCode: string
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
      /**
       * @description Optional details about the symptoms of this challenge
       * @example John struggles to read text on white background.
       */
      symptoms?: string
      /**
       * @description The list of enums as to how this challenge was identified. Multiple reasons may apply.
       * @example null
       */
      howIdentified?: (
        | 'EDUCATION_SKILLS_WORK'
        | 'WIDER_PRISON'
        | 'CONVERSATIONS'
        | 'COLLEAGUE_INFO'
        | 'FORMAL_PROCESSES'
        | 'SELF_DISCLOSURE'
        | 'OTHER_SCREENING_TOOL'
        | 'OTHER'
      )[]
      /**
       * @description Details about how this challenge was identified when the OTHER IdentificationSource enum option is chosen
       * @example The trainer noticed that John could read better on a cream background.
       */
      howIdentifiedOther?: string
    }
    CreateChallengesRequest: {
      /**
       * @description A List containing zero or more Challenges.
       * @example null
       */
      challenges: components['schemas']['ChallengeRequest'][]
    }
    ChallengeListResponse: {
      /**
       * @description A List containing zero or more Challenges.
       * @example null
       */
      challenges: components['schemas']['ChallengeResponse'][]
    }
    ALNChallenge: {
      /**
       * @description the reference data type code of the challenge
       * @example null
       */
      challengeTypeCode: string
    }
    ALNScreenerRequest: {
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
      /**
       * Format: date
       * @description An ISO-8601 date representing the date the screener was carried out.
       * @example 2023-11-19
       */
      screenerDate: string
      /**
       * @description A List containing zero or more challenge codes.
       * @example null
       */
      challenges: components['schemas']['ALNChallenge'][]
      /**
       * @description A List containing zero or more strength codes.
       * @example null
       */
      strengths: components['schemas']['ALNStrength'][]
    }
    ALNStrength: {
      /**
       * @description the reference data type code of the strength
       * @example null
       */
      strengthTypeCode: string
    }
    UpdatePlanCreationStatusRequest: {
      /**
       * @description The Prison identifier.
       * @example BXI
       */
      prisonId: string
      /**
       * @example null
       * @enum {string}
       */
      status: 'EXEMPT_PRISONER_NOT_COMPLY'
      /**
       * @example null
       * @enum {string}
       */
      exemptionReason?: 'EXEMPT_REFUSED_TO_ENGAGE' | 'EXEMPT_NOT_REQUIRED' | 'EXEMPT_INACCURATE_IDENTIFICATION'
      /**
       * @description More Detail about the reason for the exemption
       * @example null
       */
      exemptionDetail?: string
    }
    PlanCreationScheduleResponse: {
      /**
       * Format: uuid
       * @description The unique reference of this plan creation schedule
       * @example c88a6c48-97e2-4c04-93b5-98619966447b
       */
      reference: string
      /**
       * Format: date
       * @description An ISO-8601 date representing date that the plan creation is due.  If this date is null then there is no dead line date. eg when a person has a need identified  after they are enrolled in education.
       * @example 2023-11-19
       */
      deadlineDate: string
      /**
       * @example null
       * @enum {string}
       */
      status:
        | 'SCHEDULED'
        | 'EXEMPT_SYSTEM_TECHNICAL_ISSUE'
        | 'EXEMPT_PRISONER_TRANSFER'
        | 'EXEMPT_PRISONER_RELEASE'
        | 'EXEMPT_PRISONER_DEATH'
        | 'EXEMPT_PRISONER_MERGE'
        | 'EXEMPT_PRISONER_NOT_COMPLY'
        | 'EXEMPT_NOT_IN_EDUCATION'
        | 'EXEMPT_NO_NEED'
        | 'EXEMPT_UNKNOWN'
        | 'COMPLETED'
      /**
       * @description The DPS username of the person who created this resource.
       * @example asmith_gen
       */
      createdBy: string
      /**
       * @description The display name of the person who created this resource.
       * @example Alex Smith
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was created.
       * @example 2023-06-19T09:39:44Z
       */
      createdAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was created.
       * @example BXI
       */
      createdAtPrison: string
      /**
       * @description The DPS username of the person who last updated this resource.
       * @example asmith_gen
       */
      updatedBy: string
      /**
       * @description The display name of the person who last updated this resource.
       * @example Alex Smith
       */
      updatedByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was last updated. This will be the same as the created date if it has not yet been updated.
       * @example 2023-06-19T09:39:44Z
       */
      updatedAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was updated.
       * @example BXI
       */
      updatedAtPrison: string
      /**
       * Format: date
       * @description An ISO-8601 date representing earliest date that the plan can be created.  If this date is null then there is no restriction. eg when a person has a need identified  after they are enrolled in education.
       * @example 2023-11-19
       */
      earliestStartDate?: string
      /**
       * Format: date
       * @description If the status of this Plan Creation Schedule is COMPLETED, this field is an ISO-8601 date representing  date that the Education Support Plan was created. This field will only have a value when the status of the  Plan Creation Schedule is COMPLETED, and reflects the date the Education Support Plan was created  (rather than the Plan Creation Schedule)
       * @example 2023-11-19
       */
      planCompletedDate?: string
      /**
       * @description If the status of this Plan Creation Schedule is COMPLETED, and the person who met with the  prisoner to create their Education Support Plan was not the same person who keyed it into  the SAN service, this field will be that person's name. This field will only have a value  when the status of the Plan Creation Schedule is COMPLETED, and the person who met with  the prisoner to create their Education Support Plan was not the same person who keyed it into the SAN service. If the Plan Creation Schedule is COMPLETED and this field is null,  consumers of this API can assume the person who created the Education Support Plan is  the person who keyed it in. See field planKeyedInBy
       * @example null
       */
      planCompletedBy?: string
      /**
       * @description If the status of this Plan Creation Schedule is COMPLETED, this field is the DPS  username of the user that keyed the Education Support Plan into the system.This  field will only have a value when the status of the Plan Creation Schedule is COMPLETED,  and reflects the logged in user who interacted with the SAN service.
       * @example null
       */
      planKeyedInBy?: string
      /**
       * @description The job role of the person who completed the plan.
       * @example Education coordinator
       */
      planCompletedByJobRole?: string
      /**
       * @example null
       * @enum {string}
       */
      exemptionReason?: 'EXEMPT_REFUSED_TO_ENGAGE' | 'EXEMPT_NOT_REQUIRED' | 'EXEMPT_INACCURATE_IDENTIFICATION'
      /**
       * @description More detail about the reason for this exemption. This is mainly used for EXEMPT_PRISONER_NOT_COMPLY.
       * @example null
       */
      exemptionDetail?: string
      /**
       * @description The source(s) for why this plan creation schedule is needed. Multiple reasons may apply.
       * @example null
       */
      needSources?: (
        | 'LDD_SCREENER'
        | 'ALN_SCREENER'
        | 'CONDITION_SELF_DECLARED'
        | 'CONDITION_CONFIRMED_DIAGNOSIS'
        | 'CHALLENGE_NOT_ALN_SCREENER'
      )[]
      /**
       * Format: int32
       * @description the version number of this schedule (the highest number is the most recent version of this plan creation schedule)
       * @example null
       */
      version?: number
    }
    PlanCreationSchedulesResponse: {
      /**
       * @description A List containing zero or more PlanCreationSchedules.
       * @example null
       */
      planCreationSchedules: components['schemas']['PlanCreationScheduleResponse'][]
    }
    PaginationMetaData: {
      /**
       * Format: int32
       * @description Total number of elements matching the criteria
       * @example 100
       */
      totalElements: number
      /**
       * Format: int32
       * @description Total number of pages
       * @example 5
       */
      totalPages: number
      /**
       * Format: int32
       * @description Current page number
       * @example 2
       */
      page: number
      /**
       * @description Indicates this is the last page
       * @example false
       */
      last: boolean
      /**
       * @description Indicates this is the first page
       * @example false
       */
      first: boolean
      /**
       * Format: int32
       * @description Number of items per page
       * @example 20
       */
      pageSize: number
    }
    Person: {
      /**
       * @description The prisoner's forename.
       * @example Bob
       */
      forename: string
      /**
       * @description The prisoner's surname.
       * @example Smith
       */
      surname: string
      /**
       * @description The prisoner's NOMIS number.
       * @example A1234BC
       */
      prisonNumber: string
      /**
       * Format: date
       * @description The prisoner's date of birth.
       * @example 1999-12-01
       */
      dateOfBirth: string
      /**
       * @description The prisoner's sentence type.
       * @example null
       * @enum {string}
       */
      sentenceType:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description Returns true if this person has any ALN needs, LDD needs, SAN condition or SAN Challenge.
       * @example null
       */
      hasAdditionalNeed: boolean
      /**
       * @description Returns true if this person is currently in education.
       * @example null
       */
      inEducation: boolean
      /**
       * @description The status of the persons plan.
       * @example null
       * @enum {string}
       */
      planStatus:
        | 'PLAN_OVERDUE'
        | 'PLAN_DUE'
        | 'REVIEW_OVERDUE'
        | 'REVIEW_DUE'
        | 'ACTIVE_PLAN'
        | 'NEEDS_PLAN'
        | 'INACTIVE_PLAN'
        | 'PLAN_DECLINED'
        | 'NO_PLAN'
      /**
       * @description The prisoner's cell location within prison
       * @example B-3-047
       */
      cellLocation?: string
      /**
       * Format: date
       * @description The prisoner's release date as returned by prisoner-search-api.
       * @example 2035-11-01
       */
      releaseDate?: string
      /**
       * Format: date
       * @description Either the plan creation,or review deadline date.
       * @example 2035-11-01
       */
      deadlineDate?: string
    }
    SearchByPrisonResponse: {
      /** @example null */
      pagination: components['schemas']['PaginationMetaData']
      /**
       * @description A List containing zero or more people matching the search.
       * @example null
       */
      people: components['schemas']['Person'][]
    }
    ReferenceDataListResponse: {
      /**
       * @description A List containing zero or more ReferenceDataItem.
       * @example null
       */
      referenceDataList: components['schemas']['ReferenceData'][]
    }
    DlqMessage: {
      body: {
        [key: string]: unknown
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    ReviewScheduleResponse: {
      /**
       * Format: uuid
       * @description The unique reference of this Review
       * @example c88a6c48-97e2-4c04-93b5-98619966447b
       */
      reference: string
      /**
       * Format: date
       * @description An ISO-8601 date representing date that the Review is due. This date can be null. For example the person was in education and had a cataract which meant they had a visual support need.  The ELSP was created for the person. At some point in the future the cataract was removed and  so the plan was updated removing this need education ends for this person.  Then the person is enrolled in education once again. After enrolling a new need is identified (say)  ADHD then the plan will have a review schedule generated but because the person had already started  education the deadline date will be blank and therefore the review is optional and not subject to  the KPI requirements.
       * @example 2023-11-19
       */
      deadlineDate: string
      /**
       * @example null
       * @enum {string}
       */
      status:
        | 'SCHEDULED'
        | 'EXEMPT_SYSTEM_TECHNICAL_ISSUE'
        | 'EXEMPT_PRISONER_TRANSFER'
        | 'EXEMPT_PRISONER_RELEASE'
        | 'EXEMPT_PRISONER_DEATH'
        | 'EXEMPT_PRISONER_MERGE'
        | 'EXEMPT_PRISONER_NOT_COMPLY'
        | 'EXEMPT_NOT_IN_EDUCATION'
        | 'EXEMPT_NO_NEED'
        | 'EXEMPT_UNKNOWN'
        | 'COMPLETED'
      /**
       * @description The DPS username of the person who created this resource.
       * @example asmith_gen
       */
      createdBy: string
      /**
       * @description The display name of the person who created this resource.
       * @example Alex Smith
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was created.
       * @example 2023-06-19T09:39:44Z
       */
      createdAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was created.
       * @example BXI
       */
      createdAtPrison: string
      /**
       * @description The DPS username of the person who last updated this resource.
       * @example asmith_gen
       */
      updatedBy: string
      /**
       * @description The display name of the person who last updated this resource.
       * @example Alex Smith
       */
      updatedByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was last updated. This will be the same as the created date if it has not yet been updated.
       * @example 2023-06-19T09:39:44Z
       */
      updatedAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was updated.
       * @example BXI
       */
      updatedAtPrison: string
      /**
       * Format: date
       * @description If the status of this Review Schedule is COMPLETED, this field is an ISO-8601 date representing  date that the Review was created. This field will only have a value when the status of the  Review Schedule is COMPLETED, and reflects the date the Review was completed.
       * @example 2023-11-19
       */
      reviewCompletedDate?: string
      /**
       * @description If the status of this Review Schedule is COMPLETED, this field is the DPS  username of the user that keyed the Review into the system.This  field will only have a value when the status of the Review Schedule is COMPLETED,  and reflects the logged in user who interacted with the SAN service.
       * @example null
       */
      reviewKeyedInBy?: string
      /**
       * @description If the status of this Review Schedule is COMPLETED, and the person who met with the  prisoner to create their Review was not the same person who keyed it into  the SAN service, this field will be that person's name. This field will only have a value  when the status of the Review Schedule is COMPLETED, and the person who met with  the prisoner to create their Education Support Plan was not the same person who keyed it into the SAN service. If the Review Schedule is COMPLETED and this field is null,  consumers of this API can assume the person who created the Review is  the person who keyed it in. See field reviewKeyedInBy
       * @example null
       */
      reviewCompletedBy?: string
      /**
       * @description The job role of the person who completed the review.
       * @example Education coordinator
       */
      reviewCompletedByJobRole?: string
      /**
       * @description An optional reason as to why the Review Schedule is exempted.  Only present when the `status` field is one of the `EXEMPTION_` statuses and the user entered an exemption  reason when marking the Review as Exempted.
       * @example null
       */
      exemptionReason?: string
      /**
       * Format: int32
       * @description the version number of this schedule (the highest number is the most recent version of this review schedule)
       * @example null
       */
      version?: number
    }
    ReviewSchedulesResponse: {
      /**
       * @description A List containing zero or more ReviewSchedules.
       * @example null
       */
      reviewSchedules: components['schemas']['ReviewScheduleResponse'][]
    }
    PlanActionStatus: {
      /**
       * @example null
       * @enum {string}
       */
      status:
        | 'PLAN_OVERDUE'
        | 'PLAN_DUE'
        | 'REVIEW_OVERDUE'
        | 'REVIEW_DUE'
        | 'ACTIVE_PLAN'
        | 'NEEDS_PLAN'
        | 'INACTIVE_PLAN'
        | 'PLAN_DECLINED'
        | 'NO_PLAN'
      /**
       * Format: date
       * @description An ISO-8601 date representing date that the plan creation is due.
       * @example 2023-11-19
       */
      planCreationDeadlineDate?: string
      /**
       * Format: date
       * @description An ISO-8601 date representing date that the next plan review is due.
       * @example 2023-11-19
       */
      reviewDeadlineDate?: string
      /**
       * @example null
       * @enum {string}
       */
      exemptionReason?: 'EXEMPT_REFUSED_TO_ENGAGE' | 'EXEMPT_NOT_REQUIRED' | 'EXEMPT_INACCURATE_IDENTIFICATION'
      /**
       * @description More detail about the reason the plan was declined. This is mainly used for EXEMPT_PRISONER_NOT_COMPLY.
       * @example null
       */
      exemptionDetail?: string
      /**
       * @description If the plan was declined by the prisoner, the display name of the person who recorded the plan exemption.
       * @example Alex Smith
       */
      exemptionRecordedBy?: string
      /**
       * Format: date-time
       * @description If the plan was declined by the prisoner, the timestamp that the plan was exempted.
       * @example 2025-10-04
       */
      exemptionRecordedAt?: string
    }
    ALNScreenerResponse: {
      /**
       * Format: uuid
       * @description The unique reference of this ALN screener
       * @example c88a6c48-97e2-4c04-93b5-98619966447b
       */
      reference: string
      /**
       * Format: date
       * @description An ISO-8601 date representing the date the screener was carried out.
       * @example 2023-11-19
       */
      screenerDate: string
      /**
       * @description A List containing zero or more challenges.
       * @example null
       */
      challenges: components['schemas']['ChallengeResponse'][]
      /**
       * @description A List containing zero or more strengths.
       * @example null
       */
      strengths: components['schemas']['StrengthResponse'][]
      /**
       * @description The DPS username of the person who created this resource.
       * @example asmith_gen
       */
      createdBy: string
      /**
       * @description The display name of the person who created this resource.
       * @example Alex Smith
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was created.
       * @example 2023-06-19T09:39:44Z
       */
      createdAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was created.
       * @example BXI
       */
      createdAtPrison: string
      /**
       * @description The DPS username of the person who last updated this resource.
       * @example asmith_gen
       */
      updatedBy: string
      /**
       * @description The display name of the person who last updated this resource.
       * @example Alex Smith
       */
      updatedByDisplayName: string
      /**
       * Format: date-time
       * @description An ISO-8601 timestamp representing when this resource was last updated. This will be the same as the created date if it has not yet been updated.
       * @example 2023-06-19T09:39:44Z
       */
      updatedAt: string
      /**
       * @description The identifier of the prison that the prisoner was resident at when this resource was updated.
       * @example BXI
       */
      updatedAtPrison: string
    }
    ALNScreeners: {
      /**
       * @description A List containing zero or more ALNScreener.
       * @example null
       */
      screeners: components['schemas']['ALNScreenerResponse'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  updateSupportStrategy: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        supportStrategyReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSupportStrategyRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['SupportStrategyResponse']
        }
      }
    }
  }
  updateStrength: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        strengthReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateStrengthRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['StrengthResponse']
        }
      }
    }
  }
  updateCondition: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        conditionReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateConditionRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ConditionResponse']
        }
      }
    }
  }
  updateChallenge: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
        challengeReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateChallengeRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ChallengeResponse']
        }
      }
    }
  }
  getSupportStrategies: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['SupportStrategyListResponse']
        }
      }
    }
  }
  createSupportStrategies: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSupportStrategiesRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['SupportStrategyListResponse']
        }
      }
    }
  }
  getStrengths: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['StrengthListResponse']
        }
      }
    }
  }
  createStrengths: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateStrengthsRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['StrengthListResponse']
        }
      }
    }
  }
  createPersonInEducationWithNeeds: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EducationNeedRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PlanCreationScheduleEntity']
        }
      }
    }
  }
  educationTriggerSimulation: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getEducationSupportPlan: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['EducationSupportPlanResponse']
        }
      }
    }
  }
  createEducationSupportPlan: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateEducationSupportPlanRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['EducationSupportPlanResponse']
        }
      }
    }
  }
  createReview: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SupportPlanReviewRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getConditions: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ConditionListResponse']
        }
      }
    }
  }
  createConditions: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateConditionsRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ConditionListResponse']
        }
      }
    }
  }
  getChallenges: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ChallengeListResponse']
        }
      }
    }
  }
  createChallenges: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateChallengesRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ChallengeListResponse']
        }
      }
    }
  }
  alnTriggerSimulation: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getALNScreener: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ALNScreeners']
        }
      }
    }
  }
  createALNScreener: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ALNScreenerRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  updatePlanCreationScheduleStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePlanCreationStatusRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PlanCreationSchedulesResponse']
        }
      }
    }
  }
  searchByPrison: {
    parameters: {
      query?: {
        prisonerNameOrNumber?: string
        sortBy?: 'PRISONER_NAME' | 'PRISON_NUMBER' | 'CELL_LOCATION' | 'RELEASE_DATE' | 'DEADLINE_DATE' | 'PLAN_STATUS'
        sortDirection?: 'ASC' | 'DESC'
        page?: number
        pageSize?: number
      }
      header?: never
      path: {
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['SearchByPrisonResponse']
        }
      }
    }
  }
  getReferenceData: {
    parameters: {
      query?: {
        /** @description Include inactive reference data. Defaults to false */
        includeInactive?: boolean
      }
      header?: never
      path: {
        /** @description Reference data domain. */
        domain: 'CONDITION' | 'CHALLENGE' | 'STRENGTH' | 'SUPPORT_STRATEGY'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ReferenceDataListResponse']
        }
      }
    }
  }
  getReferenceDataCategories: {
    parameters: {
      query?: {
        /** @description Include inactive reference data. Defaults to false */
        includeInactive?: boolean
      }
      header?: never
      path: {
        /** @description Reference data domain. */
        domain: 'CONDITION' | 'CHALLENGE' | 'STRENGTH' | 'SUPPORT_STRATEGY'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ReferenceDataListResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  getReviewSchedules: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ReviewSchedulesResponse']
        }
      }
    }
  }
  getPlanCreationSchedules: {
    parameters: {
      query?: {
        includeAllHistory?: boolean
      }
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PlanCreationSchedulesResponse']
        }
      }
    }
  }
  getPlanActionStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PlanActionStatus']
        }
      }
    }
  }
}
